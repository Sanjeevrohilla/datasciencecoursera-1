install.packages(kernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
install.packages(c("ggplot2", "devtools"))
find.package("devtools")
find_rtools()
library(devtools)
find_rtools()
v_i = devtools:::version_info
v_i[["3.5"]] = v_i[["3.4"]]
v_i[["3.5"]]$version_max = "3.5.99"
assignInNamespace(x     = "version_info",
value = v_i,
ns    = "devtools")
devtools::find_rtools()
library(devtools)
v_i = devtools:::version_info
v_i[["3.5"]] = v_i[["3.4"]]
v_i[["3.5"]]$version_max = "3.5.99"
assignInNamespace(x     = "version_info",
value = v_i,
ns    = "devtools")
devtools::find_rtools()
library(devtools)
find_rtools
find_rtools()
library(devtools)
find_rtools()
ls()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source('G:/R Programming/W2_Assign/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
source('G:/R Programming/W2_Assign/complete.R')
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
source('G:/R Programming/W2_Assign/corr.R')
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
mean(iris[["Sepal.length"]])
mean(iris[["Sepal.length"]] , na.rm = TRUE)
iris[["Sepal.length"]]
iris[["Sepal.Length"]]
mean(iris[["Sepal.length"]] , iris[[Species]] = "virginica")
x <- iris[["Sepal.length"]] , iris[[Species]] = "virginica")
x <- (iris[["Sepal.length"]] , iris[[Species]] = "virginica")
tapply(iris[["Sepal.length"]] , iris[["Species"]] , mean)
iris[["Species"]]
iris[["Species"]] = "virginica"
iris[["Species"]]
library(datasets)
data(iris)
split.data.frame(iris[["Sepal.Length"]],iris[["Species"]])
split.data.frame(iris[["Sepal.Length"]],iris[["Species"]],...)
split.data.frame(iris[["Sepal.Length"]],iris[["Species"]])
cls()
library(datasets)
data(iris)
x = data.frame()
if iris[["Species"]] == "virginica"
if(iris[["Species"]] == "virginica")
x <- iris
library(datasets)
data(iris)
x <- data.table(mydf)
install.packages("data.table")
x <- data.table(iris)
library(data.table)
load(data.table)
x <- data.table(iris)
x[, mean(iris[["Sepal.Length"]]) , by = iris[["Species"]]]
apply(iris,2,mean)
colMeans(iris)
apply(iris,1,mean)
rowMeans(iris[, 1:4])
View()
View(iris)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
library(data.table)
x <- data.table(mtcars)
x[, mean(mtcars[["mpg"]]) , by = mtcars[["cyl"]]]
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
library(irisdata)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
class(x)
x["4"]
abs()
abs(x["4"]-x["8"])
round(126.5779)
round(6.588)
debug(ls)
ls()
}
exit
q
exit
C
n <- 1000
r <- numeric(n)
n <- 1000
n <- 1000
r <- numeric(n)
r
for (i in 1:n) {
}
for(i in 1:n) { x<- rnorm(n) r[i] <- mean(x)}
for(i in 1:n){x<- rnorm(n) r[i] <- mean(x)}
for(i in 1:n){x<- rnorm(n) r[i] <- mean(x)}
n <- 1000
r <- numeric(n)
for(i in 1:n){
x <- rnorm(n)
r[i] <- mean(x)
}
r[1]
rnorm(n)
mean(rnorm(x))
mean(rnorm(n))
rnorm(n)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- 5
x2 <- 3
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?lm
swirl()
library(swirl)
swirl()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3") ,recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1,2), each = 10)
bye()
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
rankhospital("TX", "heart failure", 4)
setwd("G:/Github/datasciencecoursera/R_Programming/week4_Assignment")
rankhosp("TX", "heart failure", 4)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
rankhospital("TX", "heart failure", 4)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
data1 <- read.csv("outcome-of-care-measures.csv",colClasses = "character")     #Read data
data2 <- subset(data1, State == state)
data2 <- subset(data1, State == "TX")
View(data2)
View(data2)
data2[ ,17] == as.numeric(data2[ ,17])      # ***                      #Getting required row and hospital
data2[ ,17] <- as.numeric(data2[ ,17])
col <- 17
data3 <- data2[order(data2[ ,col],data2[,2]), ]
View(data3)
data3 <- data2[order(data2[ ,col],data2[,2])]
data3 <- data2[order(data2[ ,col],data2[,2]), ]
data3 <- data3[(!is.na(data3[ ,col])),]
data3 <- data2[order(data2[ ,col],data2[,2]), ]
data4 <- data3[(!is.na(data3[ ,col])),]
?order
View(data4)
req_row <- which(as.numeric(data2[ ,col]) == min(as.numeric(data2[ ,col]), na.rm = TRUE))
req <- min(as.numeric(data2[ ,col]), na.rm = TRUE))
req <- min(as.numeric(data2[ ,col]), na.rm = TRUE)
?which
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhosp.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", best)
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", "wrost")
?na.last
??na.last
?order
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
rankhospital("TX", "heart failure", "wrost")
?grep
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
head(rankall("heart attack", 20), 10)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/best.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source('G:/Github/datasciencecoursera/R_Programming/week4_Assignment/rankall.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
